library ieee;
use ieee.std_logic_1164.all;

entity ELEVATOR is
    port (
        CallCode, PanelCode: in std_logic_vector(1 downto 0);
        Call, Request, Sensor, Clk, Emergency: in std_logic;
        UP, DOWN, STOPOPEN, CLOSE: inout std_logic;
        a, b, c, d, e, f, g: out std_logic
    );
end entity ELEVATOR;

architecture LogicOperation of ELEVATOR is
    component FLOORCOUNTER is
        port (
            UP, DOWN, Sensor: in std_logic;
            FLRCODE: out std_logic_vector(1 downto 0)
        );
    end component FLOORCOUNTER;

    component FLRCALLCOMPARATOR is
        port (
            FlrCodeCall, FlrCodeCnt: in std_logic_vector(1 downto 0);
            UP, DOWN, STOP: inout std_logic
        );
    end component FLRCALLCOMPARATOR;

    component CODEREGISTER is
        port (
            Clk: in std_logic;
            FlrCodeIn: in std_logic_vector(0 to 1);
            FlrCodeOut: out std_logic_vector(0 to 1)
        );
    end component CODEREGISTER;

    component Timer is
        port (
            Enable, Clk: in std_logic;
            SetCount: in integer range 0 to 1023;
            QOut: inout std_logic
        );
    end component Timer;

    component SevenSegment is
        port (
            a, b, c, d, e, f, g: out std_logic;
            H0, H1: inout std_logic
        );
    end component SevenSegment;

    component JKFlipFlop is
        port (
            J, K, Clk: in std_logic;
            Q: out std_logic
        );
    end component JKFlipFlop;

    signal FRCNT, FRCLOUT, FRCL, FRIN: std_logic_vector(0 to 1);
    signal CallEn: std_logic;
    signal EmergencyActive: std_logic;

begin
    process (Emergency)
    begin
        if Emergency = '1' then
            EmergencyActive <= '1';
        end if;
    end process;

    process (CallEn, EmergencyActive, CallCode, PanelCode)
    begin
        if EmergencyActive = '1' then
            FRIN <= "00";
        elsif CallEn = '1' then
            FRIN <= CallCode;
        else
            FRIN <= PanelCode;
        end if;
    end process;

    CALLREQ: JKFlipFlop port map(J => '1', K => '1', Clk => CLOSE, Q => CallEn);
    CODEREG: CODEREGISTER port map(Clk => Clk, FlrCodeIn => FRIN, FlrCodeOut => FRCL);
    FLCLCOMP: FLRCALLCOMPARATOR port map(FlrCodeCall => FRCL, FlrCodeCnt => FRCNT, UP => UP, DOWN => DOWN, STOP => STOPOPEN);
    FLRCNT: FLOORCOUNTER port map(UP => UP, DOWN => DOWN, Sensor => Sensor, FLRCODE => FRCNT);
    DISPLAY: SevenSegment port map(a => a, b => b, c => c, d => d, e => e, f => f, g => g, H0 => FRCNT(1), H1 => FRCNT(0));
    TIMER1: Timer port map(Enable => STOPOPEN, Clk => Clk, SetCount => 10, QOut => CLOSE);

end architecture LogicOperation;
